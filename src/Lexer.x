{
module Lexer (
    runAlex',
    alexMonadScan',
    alexError',
    scanner,
    Alex,
    Token(..)
) where

import Control.Monad (liftM)
import Data.Char (toLower)
import AST (Pos(Pos))
}

%wrapper "monadUserState"

$digit = 0-9
$alpha = [a-zA-Z]

tokens :-
    $white+                         ;
    "//".*                          ;
    $digit+                                           { tok_read TokenInt }
    -- operations
    "=="                                              { tok TokenEqual }
    "!="                                              { tok TokenNotEqual }
    "<"                                               { tok TokenLower }
    "<="                                              { tok TokenLowerEqual }
    ">"                                               { tok TokenGreater }
    ">="                                              { tok TokenGreaterEqual }
    "+"                                               { tok TokenAdd }
    "-"                                               { tok TokenSubtract }
    "*"                                               { tok TokenMultiply }
    "/"                                               { tok TokenDivide }
    "%"                                               { tok TokenModulo }
    "("                                               { tok TokenLParent }
    ")"                                               { tok TokenRParent }
    "{"                                               { tok TokenLBraces }
    "}"                                               { tok TokenRBraces }
    "&&"                                              { tok TokenAnd }
    "||"                                              { tok TokenOr }
    "!"                                               { tok TokenNot }
    "++"                                              { tok TokenPostIncr }
    "--"                                              { tok TokenPostDecr }
    -- Some other characters
    "="                                               { tok TokenAssign }
    "+="                                              { tok TokenAddAssign }
    "-="                                              { tok TokenSubtractAssign }
    "*="                                              { tok TokenMultiplyAssign }
    "/="                                              { tok TokenDivideAssign }
    "%="                                              { tok TokenModuloAssign }
    ";"                                               { tok TokenSemicolon }
    ":"                                               { tok TokenColon }
    ","                                               { tok TokenComma }
    -- identifier and reserved
    [$alpha \_ ] [$alpha $digit \_ ]*                 { tok_string TokenIdent }

{

tok' :: (Pos -> String -> Token) -> AlexAction Token
tok' f (AlexPn _ l c,_,_,s) i = getFilePath >>= (\fp -> return $ (f (Pos fp l c) (take i s)))

tok :: (Pos -> Token) -> AlexAction Token
tok x = tok' $ \p _ -> x p

reserved = [ ( "int"    , TokenTInt   )
           , ( "void"   , TokenTVoid  )
           , ( "bool"   , TokenTBool  )
           , ( "if"     , TokenIf     )
           , ( "else"   , TokenElse   )
           , ( "return" , TokenReturn )
           , ( "for"    , TokenFor    )
           , ( "while"  , TokenWhile  )
           , ( "goto"   , TokenGoto   )
           , ( "break"  , TokenBreak  )
           ]

tok_read :: ((Integer, Pos) -> Token) -> AlexAction Token
tok_read x = tok' $ \p s -> x ((read s), p)

tok_string :: ((String, Pos) -> Token) -> AlexAction Token
tok_string x = tok' $ \p s' ->
                          let s = map toLower s' in
                          let d = lookup s reserved in
                          maybe (x (s, p)) ($ p) d

alexEOF :: Alex Token
alexEOF = do
  (AlexPn _ l c, _, _, _) <- alexGetInput
  fp <- getFilePath
  return $ TokenEOF (Pos fp l c)

scanner :: String -> FilePath -> Either String [Token]
scanner str fp =
    let loop = do
                t <- alexMonadScan'
                case t of
                  TokenEOF _ -> return [t]
                  _ -> do
                        toks <- loop
                        return (t : toks)
    in runAlex' str fp loop

data AlexUserState = AlexUserState FilePath

alexInitUserState :: AlexUserState
alexInitUserState = AlexUserState "<unknown>"

-- almost identical to the one generated by alex
alexMonadScan' :: Alex Token
alexMonadScan' = do
  inp <- alexGetInput
  sc <- alexGetStartCode
  case alexScan inp sc of
    AlexEOF -> alexEOF
    AlexError (_,_,_,s) -> alexError' $ "lexical error at character '" ++ take 1 s ++ "'" --line changed
    AlexSkip  inp' _len -> do
        alexSetInput inp'
        alexMonadScan' --line changed
    AlexToken inp' len action -> do
        alexSetInput inp'
        action (ignorePendingBytes inp) len

setFilePath :: FilePath -> Alex ()
setFilePath fp = alexSetUserState $ AlexUserState fp

getFilePath :: Alex FilePath
getFilePath = liftM (\(AlexUserState fp) -> fp) alexGetUserState

runAlex' :: String -> FilePath -> Alex a -> Either String a
runAlex' s fp a = runAlex s $
    do setFilePath fp
       a

alexError' :: String -> Alex a
alexError' msg =
    do
      fp <- getFilePath
      (AlexPn _ l c, _, _, _) <- alexGetInput
      alexError ((show (Pos fp l c)) ++ ":\n" ++ msg)

-- data Position = Position AlexPosn FilePath deriving (Eq)
-- 
-- instance Show Position where
--     show (Position (AlexPn _ l c) fp) = "File \"" ++ fp ++ "\", line " ++ show l ++ ", characters " ++ show c ++ "-" ++ show (c+1)
 
data Token =
      TokenInt            (Integer, Pos)
    | TokenIdent          (String, Pos)
    | TokenTInt           Pos
    | TokenTVoid          Pos
    | TokenTBool          Pos
    | TokenAnd            Pos
    | TokenOr             Pos
    | TokenNot            Pos
    | TokenElse           Pos
    | TokenIf             Pos
    | TokenReturn         Pos
    | TokenWhile          Pos
    | TokenFor            Pos
    | TokenGoto           Pos
    | TokenBreak          Pos
    | TokenEqual          Pos
    | TokenNotEqual       Pos
    | TokenLower          Pos
    | TokenLowerEqual     Pos
    | TokenGreater        Pos
    | TokenGreaterEqual   Pos
    | TokenAdd            Pos
    | TokenSubtract       Pos
    | TokenMultiply       Pos
    | TokenDivide         Pos
    | TokenModulo         Pos
    | TokenAddAssign      Pos
    | TokenSubtractAssign Pos
    | TokenMultiplyAssign Pos
    | TokenDivideAssign   Pos
    | TokenModuloAssign   Pos
    | TokenPostIncr       Pos
    | TokenPostDecr       Pos
    | TokenLParent        Pos
    | TokenRParent        Pos
    | TokenLBraces        Pos
    | TokenRBraces        Pos
    | TokenAssign         Pos
    | TokenSemicolon      Pos
    | TokenColon          Pos
    | TokenComma          Pos
    | TokenEOF            Pos
    deriving (Eq)


instance Show Token where
    show (TokenInt (i,_))        = show i
    show (TokenIdent (s,_))      = s
    show (TokenTInt _)           = "int"
    show (TokenTVoid _)          = "void"
    show (TokenTBool _)          = "bool"
    show (TokenAnd _)            = "&&"
    show (TokenOr _)             = "||"
    show (TokenNot _)            = "!"
    show (TokenElse _)           = "else"
    show (TokenIf _)             = "if"
    show (TokenReturn _)         = "return"
    show (TokenWhile _)          = "while"
    show (TokenFor _)            = "for"
    show (TokenGoto _)           = "goto"
    show (TokenBreak _)          = "break"
    show (TokenEqual _)          = "=="
    show (TokenNotEqual _)       = "!="
    show (TokenLower _)          = "<"
    show (TokenLowerEqual _)     = "<="
    show (TokenGreater _)        = ">"
    show (TokenGreaterEqual _)   = ">="
    show (TokenAdd _)            = "+"
    show (TokenSubtract _)       = "-"
    show (TokenMultiply _)       = "*"
    show (TokenDivide _)         = "/"
    show (TokenModulo _)         = "%"
    show (TokenAddAssign _)      = "+="
    show (TokenSubtractAssign _) = "-="
    show (TokenMultiplyAssign _) = "*="
    show (TokenDivideAssign _)   = "/="
    show (TokenModuloAssign _)   = "%="
    show (TokenPostIncr _)       = "++"
    show (TokenPostDecr _)       = "--"
    show (TokenLParent _)        = "("
    show (TokenRParent _)        = ")"
    show (TokenLBraces _)        = "{"
    show (TokenRBraces _)        = "}"
    show (TokenAssign _)         = "="
    show (TokenSemicolon _)      = ";"
    show (TokenColon _)          = ":"
    show (TokenComma _)          = ","
    show (TokenEOF _)            = "EOF"

}

